// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String
  name        String?
  phoneNumber String?   @map("phone_number")
  lastLogin   DateTime? @map("last_login")
  isAdmin     Boolean   @map("is_admin")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  tokens       Token[]
  stockEntries StockEntry[]

  @@index([username])
  @@map("users")
}

model Token {
  id     String  @id @default(uuid())
  token  String  @unique
  device String?
  os     String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @map("user_id")

  @@map("tokens")
}

model Brand {
  id         String    @id @default(uuid())
  name       String
  profitRate Float     @map("profit_rate")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  products Product[]

  @@map("brands")
}

enum Gender {
  Male
  Female
  None
}

model Product {
  id        String    @id @default(uuid())
  name      String
  weight    Float?
  volume    Float?
  gender    Gender?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  brand      Brand              @relation(fields: [brandId], references: [id])
  brandId    String             @map("brand_id")
  category   Category           @relation(fields: [categoryId], references: [id])
  categoryId String             @map("category_id")
  variations ProductVariation[]

  @@map("products")
}

model ProductVariation {
  id           String    @id @default(uuid())
  variation    String
  externalCode String    @map("external_code")
  barcode      String?   @map("bar_code")
  price        Float
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  productId String       @map("product_id")
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  iconId    String?      @map("icon_id")
  icon      Attachment?  @relation(name: "icon", fields: [iconId], references: [id], onDelete: SetNull)
  images    Attachment[] @relation("images")
  stock     Stock?

  @@map("product_variations")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  products Product[]

  @@map("categories")
}

model Stock {
  id        String   @id @default(uuid())
  quantity  Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  entries   StockEntry[]
  locations StockLocation[]

  variation   ProductVariation? @relation(fields: [variationId], references: [id], onDelete: Cascade)
  variationId String?           @unique @map("variation_id")

  @@map("stocks")
}

enum StockKind {
  ENTRY
  REMOVAL
  LOSE
}

model StockEntry {
  id             String    @id @default(uuid())
  entryDate      DateTime  @default(now()) @map("entry_date")
  costPrice      Float     @map("cost_price")
  expirationDate DateTime  @map("expiration_date")
  amount         Int
  kind           StockKind
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  stock   Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockId String @map("stock_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("stock_entries")
}

model StockLocation {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  stock   Stock  @relation(fields: [stockId], references: [id])
  stockId String @map("stock_id")

  location   Location @relation(fields: [locationId], references: [id])
  locationId String   @map("location_id")

  @@map("stock_locations")
}

model Location {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  stockLocations StockLocation[]

  @@map("locations")
}

model Attachment {
  id        String   @id @default(uuid())
  key       String?
  hash      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sizes       AttachmentSize[]
  variationId String?            @map("variation_id")
  variation   ProductVariation?  @relation(name: "images", fields: [variationId], references: [id], onDelete: Cascade)
  variations  ProductVariation[] @relation("icon")

  @@map("attachments")
}

enum SizeKind {
  XS
  S
  MD
  L
  XL
}

model AttachmentSize {
  id        String   @id @default(uuid())
  key       String
  size      SizeKind
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  attachmentId String     @map("attachment_id")

  @@map("attachments_sizes")
}
